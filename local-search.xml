<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CobaltStrike</title>
    <link href="/2020/07/27/CobaltStrike/"/>
    <url>/2020/07/27/CobaltStrike/</url>
    
    <content type="html"><![CDATA[<h1 id="Cobalt-Strike"><a href="#Cobalt-Strike" class="headerlink" title="Cobalt Strike"></a>Cobalt Strike</h1><p>多人运动领导者</p><p><img src="../img/wz/cs/CobaltStrike.jpg" srcset="/img/loading.gif" alt="CobaltStrike"></p><h2 id="界面翻译"><a href="#界面翻译" class="headerlink" title="界面翻译"></a>界面翻译</h2><h3 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h3><ul><li><strong>Cobalt Strike</strong></li></ul><pre><code class="hljs routeros">New<span class="hljs-built_in"> Connection</span>  #新的连接(支持连接多个服务器端)Preferences #偏好设置(设置Cobal Strike界面、控制台、以及输出报告样式、TeamServer连接记录等)Visualization #窗口视图模式(展示输出结果的形式)VPN Interfaces #VPN接入Listenrs #监听器(创建Listener)Script Manager #脚本管理Close #关闭</code></pre><ul><li><strong>View</strong></li></ul><pre><code class="hljs 1c">Applications  <span class="hljs-meta">#应用(显示受害者机器的应用信息)</span>Credentials  <span class="hljs-meta">#凭证(通过hashdump或Mimikatz抓取过的密码都会储存在这里)</span>Downloads   <span class="hljs-meta">#下载文件</span>Event <span class="hljs-built_in">Log</span>   <span class="hljs-meta">#事件日志(主机上线记录以及团队协作聊天记录)</span>Keystrokes    <span class="hljs-meta">#键盘记录</span>Proxy Pivots  <span class="hljs-meta">#代理模块</span>Screenshots      <span class="hljs-meta">#截图</span>Script Console   <span class="hljs-meta">#脚本控制台(可以加载各种脚本，增强功能https:<span class="hljs-comment">//github.com/rsmudge/cortana-scripts)</span></span>Targets  <span class="hljs-meta">#显示目标主机</span>Web <span class="hljs-built_in">Log</span>          <span class="hljs-meta">#Web日志</span></code></pre><ul><li><strong>Attacks</strong></li></ul><pre><code class="hljs crmsh"><span class="hljs-comment">#Packages</span>--------HTML Application<span class="hljs-comment">#生成恶意的HTA木马文件</span><span class="hljs-keyword">MS</span> <span class="hljs-title">Office</span> Macro<span class="hljs-comment">#生成office宏病毒文件</span>Payload Generator <span class="hljs-comment">#生成各种语言版本的payload</span>USB/CD AutoPlay <span class="hljs-comment">#生成利用自动播放运行的木马文件</span>Windows Dropper <span class="hljs-comment">#捆绑器，能够对文档类进行捆绑</span>Windows Executable   <span class="hljs-comment">#生成可执行Payload</span>Windows Executable(S) <span class="hljs-comment">#把包含payload,Stageless生成可执行文件(包含多数功能)</span><span class="hljs-comment">#Web Drive-by</span>--------Manage <span class="hljs-comment">#对开启的web服务进行管理</span><span class="hljs-keyword">Clone</span> <span class="hljs-title">Site</span> <span class="hljs-comment">#克隆网站(可记录受害者提交的数据)</span>Host File <span class="hljs-comment">#提供Web以供下载某文件</span>Scripted Web Delivery <span class="hljs-comment">#提供Web服务，便于下载和执行PowerShell Payload</span>Signed Applet Attack <span class="hljs-comment">#启动一个Web服务以提供自签名Java Applet的运行环境</span>Smart Applet Attack <span class="hljs-comment">#自动检测Java版本并利用已知的exploits绕过security</span>System Profiler <span class="hljs-comment">#用来获取一些系统信息，比如系统版本，Flash版本，浏览器版本等</span></code></pre><ul><li><strong>Reporting</strong></li></ul><pre><code class="hljs yaml"><span class="hljs-number">0</span><span class="hljs-string">.</span> <span class="hljs-string">Activity</span> <span class="hljs-string">report</span> <span class="hljs-comment">#活动报告</span><span class="hljs-number">1</span><span class="hljs-string">.</span> <span class="hljs-string">Hosts</span> <span class="hljs-string">report</span> <span class="hljs-comment">#主机报告</span><span class="hljs-number">2</span><span class="hljs-string">.</span> <span class="hljs-string">Indicators</span> <span class="hljs-string">of</span> <span class="hljs-string">Compromise</span> <span class="hljs-comment">#威胁报告</span><span class="hljs-number">3</span><span class="hljs-string">.</span> <span class="hljs-string">Sessions</span> <span class="hljs-string">report</span> <span class="hljs-comment">#会话报告</span><span class="hljs-number">4</span><span class="hljs-string">.</span> <span class="hljs-string">Social</span> <span class="hljs-string">engineering</span> <span class="hljs-string">report</span> <span class="hljs-comment">#社会工程学报告</span><span class="hljs-number">5</span><span class="hljs-string">.</span> <span class="hljs-string">Tactics,</span> <span class="hljs-string">Techniques,</span> <span class="hljs-string">and</span> <span class="hljs-string">Procedures</span> <span class="hljs-comment">#策略、技巧和程序  </span><span class="hljs-string">Reset</span> <span class="hljs-string">Data</span> <span class="hljs-comment">#重置数据</span><span class="hljs-string">Export</span> <span class="hljs-string">Data</span> <span class="hljs-comment">#导出数据</span></code></pre><h3 id="右键参数"><a href="#右键参数" class="headerlink" title="右键参数"></a>右键参数</h3><ul><li><strong>interact</strong></li></ul><pre><code class="hljs plain">进入Beacon</code></pre><ul><li><strong>Access</strong></li></ul><pre><code class="hljs gauss">Dump Hashes <span class="hljs-meta">#获取hash</span>Elevate <span class="hljs-meta">#提权</span>Golden Ticket <span class="hljs-meta">#生成黄金票据注入当前会话</span><span class="hljs-built_in">Make</span> <span class="hljs-built_in">token</span> <span class="hljs-meta">#凭证转换</span><span class="hljs-keyword">Run</span> Mimikatz <span class="hljs-meta">#运行 Mimikatz </span>Spawn As <span class="hljs-meta">#用其他用户生成Cobalt Strike侦听器</span></code></pre><ul><li><strong>Explore</strong></li></ul><pre><code class="hljs mipsasm"><span class="hljs-keyword">Browser </span>Pivot <span class="hljs-comment">#劫持目标浏览器进程</span>Desktop(VNC) <span class="hljs-comment">#桌面交互</span>File <span class="hljs-keyword">Browser </span><span class="hljs-comment">#文件浏览器</span>Net View <span class="hljs-comment">#命令Net View</span>Port <span class="hljs-keyword">Scan </span><span class="hljs-comment">#端口扫描</span>Process List <span class="hljs-comment">#进程列表</span><span class="hljs-keyword">Screenshot </span><span class="hljs-comment">#截图</span></code></pre><ul><li><strong>Pivoting</strong></li></ul><pre><code class="hljs routeros">SOCKS<span class="hljs-built_in"> Server </span>#代理服务Listener #反向端口转发Deploy VPN #部署VPN</code></pre><ul><li><strong>Spawn</strong></li></ul><pre><code class="hljs gcode">外部监听器<span class="hljs-comment">(如指派给MSF，获取meterpreter权限)</span></code></pre><ul><li><strong>Session</strong></li></ul><pre><code class="hljs autoit">Note <span class="hljs-meta">#备注</span>Remove <span class="hljs-meta">#删除</span><span class="hljs-built_in">Sleep</span> <span class="hljs-meta">#指定被控端休眠时间，默认60秒一次回传，让被控端每10秒来下载一次任务。</span><span class="hljs-keyword">Exit</span> <span class="hljs-meta">#退出</span></code></pre><h2 id="Cobalt-Strike-Beacon-命令详情"><a href="#Cobalt-Strike-Beacon-命令详情" class="headerlink" title="Cobalt Strike Beacon 命令详情"></a>Cobalt Strike Beacon 命令详情</h2><pre><code class="hljs routeros">beacon&gt; helpBeacon Commands===============    Command                   Description    -------                   -----------    argue                     进程参数欺骗    blockdlls                 阻止子进程加载非Microsoft DLL    browserpivot              注入受害者浏览器进程      bypassuac                 绕过UAC提升权限    cancel                    取消正在进行的下载    cd                        切换目录    checkin                   强制让被控端回连一次    clear                     清除beacon内部的任务队列    connect                   Connect <span class="hljs-keyword">to</span> a Beacon<span class="hljs-built_in"> peer </span>over TCP    covertvpn                 部署Covert VPN客户端    cp                        复制文件    dcsync                    从DC中提取密码哈希    desktop                   远程桌面(VNC)    dllinject                 反射DLL注入进程    dllload                   使用LoadLibrary将DLL加载到进程中    download                  下载文件    downloads                 列出正在进行的文件下载    drives                    列出目标盘符    elevate                   使用exp    execute                   在目标上执行程序(无输出)    execute-assembly          在目标上内存中执行本地.NET程序    exit                      终止beacon会话    getprivs                  <span class="hljs-builtin-name">Enable</span><span class="hljs-built_in"> system </span>privileges on current token    getsystem                 尝试获取SYSTEM权限    getuid                    获取用户ID    hashdump                  转储密码哈希值    help                      帮助    inject                    在注入进程生成会话    jobkill                   结束一个后台任务    jobs                      列出后台任务    kerberos_ccache_use       从ccache文件中导入票据应用于此会话    kerberos_ticket_purge     清除当前会话的票据    kerberos_ticket_use       Apply 从ticket文件中导入票据应用于此会话    keylogger                 键盘记录    kill                      结束进程    link                      Connect <span class="hljs-keyword">to</span> a Beacon<span class="hljs-built_in"> peer </span>over a named pipe    logonpasswords            使用mimikatz转储凭据和哈希值    ls                        列出文件    make_token                创建令牌以传递凭据    mimikatz                  运行mimikatz    mkdir                     创建一个目录    mode<span class="hljs-built_in"> dns </span>                 使用DNS A作为通信通道(仅限DNS beacon)    mode dns-txt              使用DNS TXT作为通信通道(仅限D beacon)    mode dns6                 使用DNS AAAA作为通信通道(仅限DNS beacon)    mode http                 使用HTTP作为通信通道    mv                        移动文件    net                       net命令   <span class="hljs-built_in"> note </span>                     备注           portscan                  进行端口扫描    powerpick                 通过Unmanaged PowerShell执行命令    powershell                通过powershell.exe执行命令    powershell-import         导入powershell脚本    ppid                      <span class="hljs-builtin-name">Set</span> parent PID <span class="hljs-keyword">for</span> spawned post-ex jobs    ps                        显示进程列表    psexec                    Use a<span class="hljs-built_in"> service </span><span class="hljs-keyword">to</span> spawn a session on a host    psexec_psh                Use PowerShell <span class="hljs-keyword">to</span> spawn a session on a host    psinject                  在特定进程中执行PowerShell命令    pth                       使用Mimikatz进行传递哈希    pwd                       当前目录位置    reg                       Query the registry    rev2self                  恢复原始令牌    rm                        删除文件或文件夹    rportfwd                  端口转发    <span class="hljs-builtin-name">run</span>                       在目标上执行程序(返回输出)    runas                     以其他用户权限执行程序    runasadmin                在高权限下执行程序    runu                      Execute a program under another PID    screenshot                屏幕截图    setenv                    设置环境变量    shell                     执行cmd命令    shinject                  将shellcode注入进程    shspawn                   启动一个进程并将shellcode注入其中    sleep                     设置睡眠延迟时间   <span class="hljs-built_in"> socks </span>                    启动SOCKS4代理   <span class="hljs-built_in"> socks </span>stop                停止SOCKS4    spawn                     Spawn a session     spawnas                   Spawn a session as another user    spawnto                   <span class="hljs-builtin-name">Set</span> executable <span class="hljs-keyword">to</span> spawn processes into    spawnu                    Spawn a session under another PID    ssh                       使用ssh连接远程主机    ssh-key                   使用密钥连接远程主机    steal_token               从进程中窃取令牌    timestomp                 将一个文件的时间戳应用到另一个文件    unlink                    Disconnect <span class="hljs-keyword">from</span> parent Beacon    upload                    上传文件    wdigest                   使用mimikatz转储明文凭据    winrm                     使用WinRM横向渗透    wmi                       使用WMI横向渗透</code></pre><h2 id="监听器介绍"><a href="#监听器介绍" class="headerlink" title="监听器介绍"></a>监听器介绍</h2><p>待更新</p>]]></content>
    
    
    <categories>
      
      <category>安全工具</category>
      
      <category>后渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo安装教程</title>
    <link href="/2020/07/26/install-hexo/"/>
    <url>/2020/07/26/install-hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo安装教程"><a href="#Hexo安装教程" class="headerlink" title="Hexo安装教程"></a>Hexo安装教程</h1><h3 id="hexo简介"><a href="#hexo简介" class="headerlink" title="hexo简介"></a>hexo简介</h3><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo官网</a>进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p><strong>Windows</strong>：到git官网上下载<a href="https://gitforwindows.org/" target="_blank" rel="noopener">Download git</a>下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p><p><strong>Linux</strong>：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码</p><pre><code class="hljs shell">sudo apt-get install gitsudo yum install git</code></pre><p>安装好后，用<code>git --version</code> 来查看一下版本</p><h3 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h3><p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。</p><p><strong>Windows</strong>：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">nodejs</a>选择LTS版本就行了</p><p><strong>Linux</strong>：</p><pre><code class="hljs shell">sudo apt-get install nodejssudo apt-get install npm</code></pre><p>安装完后，打开命令行</p><pre><code class="hljs shell">node -vnpm -v</code></pre><p>检查一下有没有安装成功</p><p>顺便说一下，windows在git安装完后，就可以直接使用git bash来敲命令行了，不用自带的cmd，cmd有点难用。</p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接右键git bash打开）</p><pre><code class="hljs shell">npm install -g hexo-cli</code></pre><p>依旧用<code>hexo -v</code>查看一下版本</p><p>至此就全部安装完了。</p><p>接下来初始化一下hexo</p><pre><code class="hljs shell">hexo init myblog</code></pre><p>这个myblog可以自己取什么名字都行，然后</p><pre><code class="hljs shell">cd myblog //进入这个myblog文件夹npm install</code></pre><p>新建完成后，指定文件夹目录下有:</p><pre><code class="hljs bash">.├── _config.yml<span class="hljs-comment">#网站的 配置 信息，您可以在此配置大部分的参数。</span>├── package.json<span class="hljs-comment">#应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除</span>├── scaffolds<span class="hljs-comment">#模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</span>├── <span class="hljs-built_in">source</span><span class="hljs-comment">#资源文件夹是存放用户资源的地方。</span>|   ├── _drafts<span class="hljs-comment">#草稿</span>|   └── _posts<span class="hljs-comment">#文章</span>└── themes<span class="hljs-comment">#主题 文件夹。Hexo 会根据主题来生成静态页面。</span></code></pre><pre><code class="hljs asciidoc">hexo generate  #生产静态文件hexo server#开启web服务====其它命令hexo deploy#部署网站hexo clean#清除缓存文件 (db.json) 和已生成的静态文件 (public)hexo list &lt;type&gt;#列出网站资料</code></pre><p>打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。</p><h2 id="上传Github并且替换个人域名"><a href="#上传Github并且替换个人域名" class="headerlink" title="上传Github并且替换个人域名"></a>上传Github并且替换个人域名</h2><p>创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名</p><h3 id="生成SSH添加Github"><a href="#生成SSH添加Github" class="headerlink" title="生成SSH添加Github"></a>生成SSH添加Github</h3><p>回到git bash</p><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global user.name <span class="hljs-string">"yourname"</span>git<span class="hljs-built_in"> config </span>--global user.email <span class="hljs-string">"youremail"</span></code></pre><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。可以用以下两条，检查一下你有没有输对</p><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>user.namegit<span class="hljs-built_in"> config </span>user.email</code></pre><p>然后创建SSH一路回车</p><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">"xxx@xx.com"</span></code></pre><p>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>而后在GitHub的setting中，找到Deploy keys的设置选项，点击Add deploy key 把你的id_rsa.pub里面的信息复制进去。</p><p>在gitbash中，查看是否成功</p><pre><code class="hljs shell">ssh -T git@github.com</code></pre><h3 id="将hexo部署到Github"><a href="#将hexo部署到Github" class="headerlink" title="将hexo部署到Github"></a>将hexo部署到Github</h3><p>将hexo生成的文章部署到GitHub上，打开站点配置文件 <code>_config.yml</code>，翻到最后，修改为你的GitHub账户</p><pre><code class="hljs less"><span class="hljs-attribute">deploy</span>:  <span class="hljs-attribute">type</span>: git  <span class="hljs-attribute">repo</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//github.com/xxx/xxx.github.io.git</span>  <span class="hljs-attribute">branch</span>: master</code></pre><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><pre><code class="hljs shell">npm install hexo-deployer-git --save</code></pre><p>然后</p><pre><code class="hljs verilog">hexo cleanhexo <span class="hljs-keyword">generate</span>hexo deploy</code></pre><p>过一会儿就可以在<a href="http://xxx.github.io这个网站看到你的博客了！！" target="_blank" rel="noopener">http://xxx.github.io这个网站看到你的博客了！！</a></p><h3 id="设置个人域名"><a href="#设置个人域名" class="headerlink" title="设置个人域名"></a>设置个人域名</h3><p>192.30.252.153 和 192.30.252.154 是GitHub的服务器地址。</p><p>在域名解析记录里面把Github地址填入</p><p>登录GitHub，进入之前创建的仓库，点击settings-Options-Choose a theme 进去随便选一个出来后从 Custom domain，输入你的域名</p><p>然后在你的博客文件source中创建一个名为CNAME文件，不要后缀。写上你的域名</p><p>最后，在gitbash中，输入</p><pre><code class="hljs properties"><span class="hljs-attr">hexo</span> <span class="hljs-string">clean</span><span class="hljs-attr">hexo</span> <span class="hljs-string">g</span><span class="hljs-attr">hexo</span> <span class="hljs-string">d</span></code></pre><h2 id="新的文章"><a href="#新的文章" class="headerlink" title="新的文章"></a>新的文章</h2><pre><code class="hljs gauss">hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;</code></pre><p>然后在source/_post中打开markdown文件，就可以开始编辑了。当你写完的时候，再更新</p><pre><code class="hljs properties"><span class="hljs-attr">hexo</span> <span class="hljs-string">clean</span><span class="hljs-attr">hexo</span> <span class="hljs-string">g</span><span class="hljs-attr">hexo</span> <span class="hljs-string">d</span></code></pre><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="noopener">https://blog.csdn.net/sinat_37781304/article/details/82729029</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
